---
description: 
globs: **/*.kt
alwaysApply: false
---
# AIアシスタントのためのガイドライン

このプロジェクトでAIアシスタントを使用する際の指針です。AI開発支援を効率的に活用するためのルールを定義します。

## 基本方針

- AIへの質問は具体的に、回答は日本語で行う
- コード生成時は、本プロジェクトの規約やアーキテクチャに準拠する
- 実装の意図や理由を明確に伝える

## AIアシスタントへの指示

### 言語とフォーマット

- **回答言語**: 基本的に日本語で回答すること
- **コード例**: 明確な例を示し、Kotlinのベストプラクティスに従うこと
- **説明スタイル**: 簡潔かつ正確な説明を心がけること

### 実装提案時の注意点

- **ルール準拠**: 提案内容がプロジェクトルールに抵触する場合は、その旨を明記すること
- **最適化提案**: 既存コードより優れた実装がある場合は【最適】と記載し理由を説明すること

```
例: 
【最適】この実装ではnullチェックとスコープ関数を組み合わせることで、より安全で簡潔なコードになります。
```

### AIとの効果的なやり取り

以下のような質問方法で、より質の高い回答を得られます：

#### 良い質問例

```
「PlayerMoveHandlerクラスにプレイヤーが走っている時のみパーティクルを表示する機能を追加したいです。
既存のコードスタイルに合わせた実装方法を教えてください。」
```

#### 効果的な指示例

```
「このコードでnullポインタ例外が発生します。Kotlinのnull安全性を活かした修正方法を示してください。」
```

## テンプレート

### 機能追加リクエスト

```
【機能追加】
目的: [機能の目的]
対象クラス: [関連するクラス名]
詳細: [実装の詳細]
```

### バグ修正リクエスト

```
【バグ修正】
現象: [バグの症状]
再現手順: [バグの再現方法]
対象コード: [問題のあるコード]
```

### コードレビューリクエスト

```
【コードレビュー】
対象: [レビュー対象のコード]
観点: [特に注目してほしい点（パフォーマンス、可読性など）]
```

## AIツールの利用シーン

- **新機能の設計**: アーキテクチャやクラス設計の相談
- **コードのリファクタリング**: より良い実装方法の提案
- **デバッグ支援**: エラーの原因特定と修正案
- **ドキュメント作成**: コメントやREADMEなどのドキュメント生成

以上のガイドラインに従うことで、AIとの効率的なコラボレーションが可能になります。
